'''
Generate plots from an SQLite database generated by load.py
'''
import argparse
import sqlite3

import plotly.graph_objects as go

class Database:

    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self.c = self.conn.cursor()

    def posts_freq_time(self, term: str = None):
        if term:
            term = f'%{term}%'
            self.c.execute("SELECT created, COUNT(*) FROM posts WHERE selftext LIKE ? GROUP BY created ORDER BY created ASC", (term,))
        else:
            self.c.execute("SELECT created, COUNT(*) FROM posts GROUP BY created ORDER BY created ASC")
        return self.c.fetchall()

    def comms_freq_time(self, term: str = None):
        if term:
            term = f'%{term}%'
            self.c.execute("SELECT created, COUNT(*) FROM comments WHERE body LIKE ? GROUP BY created ORDER BY created ASC", (term,))
        else:
            self.c.execute("SELECT created, COUNT(*) FROM comments GROUP BY created ORDER BY created ASC")
        return self.c.fetchall()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('db_path')
    parser.add_argument('metric')
    parser.add_argument('--term', required=False)
    parser.add_argument('--output', required=False)
    arguments = parser.parse_args()

    db = Database(arguments.db_path)
    dispatch = {
        'posts_frequency_by_time': db.posts_freq_time,
        'comms_frequency_by_time': db.comms_freq_time
    }
    results = dispatch[arguments.metric](term=arguments.term)
    if arguments.output:
        x, y = zip(*results)
        fig = go.Figure(data=go.Bar(x=x, y=y))
        fig.write_image(arguments.output)
    else:
        for result in results:
            print(*result, sep='\t')

